x-ci-base: &ci-base
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    CI: "true"
    CARGO_HOME: /tmp/cargo
    CARGO_TARGET_DIR: /tmp/target
  networks:
    - ci-network

services:
  lint:
    <<: *ci-base
    build:
      context: .
      target: lint
      dockerfile: Dockerfile
    container_name: ci-lint
    volumes:
      - .:/app:ro
    working_dir: /app

  format-check:
    <<: *ci-base
    build:
      context: .
      target: base
      dockerfile: Dockerfile
    container_name: ci-format-check
    volumes:
      - .:/app:ro
    working_dir: /app
    command:
      - cargo
      - fmt
      - --check

  format:
    <<: *ci-base
    build:
      context: .
      target: base
      dockerfile: Dockerfile
    container_name: ci-format
    volumes:
      - .:/app
    working_dir: /app
    command:
      - cargo
      - fmt
      - --all

  clippy:
    <<: *ci-base
    build:
      context: .
      target: base
      dockerfile: Dockerfile
    container_name: ci-clippy
    volumes:
      - .:/app:ro
      - cargo-cache:/tmp/cargo
    working_dir: /app
    command:
      - sh
      - -c
      - cargo clippy --all-targets --all-features -- -D warnings

  test:
    <<: *ci-base
    build:
      context: .
      target: test
      dockerfile: Dockerfile
    container_name: ci-test
    volumes:
      - .:/app:ro
      - cargo-cache:/tmp/cargo
    working_dir: /app
    environment:
      RUST_BACKTRACE: 1
      RUST_LOG: error
      CI: "true"

  build-release:
    <<: *ci-base
    build:
      context: .
      target: builder
      dockerfile: Dockerfile
    container_name: ci-build
    volumes:
      - .:/build
      - ./artifacts:/artifacts
      - cargo-cache:/tmp/cargo
    working_dir: /build
    command:
      - sh
      - -c
      - |
        cargo build --release
        mkdir -p /artifacts
        cp /tmp/target/release/opencli /artifacts/
        strip /artifacts/opencli
        ls -lh /artifacts/opencli
        /artifacts/opencli --version

  security-audit:
    <<: *ci-base
    build:
      context: .
      target: base
      dockerfile: Dockerfile
    container_name: ci-security
    volumes:
      - .:/app:ro
      - cargo-cache:/tmp/cargo
    working_dir: /app
    command:
      - sh
      - -c
      - |
        cargo install cargo-audit
        cargo audit

  coverage:
    <<: *ci-base
    build:
      context: .
      target: base
      dockerfile: Dockerfile
    container_name: ci-coverage
    volumes:
      - .:/app
      - cargo-cache:/tmp/cargo
    working_dir: /app
    command:
      - sh
      - -c
      - |
        cargo install cargo-tarpaulin
        cargo tarpaulin --out Xml --output-dir coverage

  benchmark:
    <<: *ci-base
    build:
      context: .
      target: base
      dockerfile: Dockerfile
    container_name: ci-benchmark
    volumes:
      - .:/app
      - cargo-cache:/tmp/cargo
    working_dir: /app
    command:
      - cargo
      - bench
      - --no-fail-fast

  size-check:
    <<: *ci-base
    build:
      context: .
      target: builder
      dockerfile: Dockerfile
    container_name: ci-size
    volumes:
      - .:/build
      - cargo-cache:/tmp/cargo
    working_dir: /build
    command:
      - sh
      - -c
      - |
        cargo build --release
        cargo build --profile min-size
        echo '=== Binary Sizes ==='
        ls -lh /tmp/target/release/opencli
        ls -lh /tmp/target/min-size/opencli
        echo '=== Size Comparison ==='
        du -h /tmp/target/release/opencli
        du -h /tmp/target/min-size/opencli

networks:
  ci-network:
    driver: bridge

volumes:
  cargo-cache:
    name: ci-cargo-cache
