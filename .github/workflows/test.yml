name: Test & Quality Check

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Code Quality (Lint & Format)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-lint-

      - name: Check formatting
        run: cargo fmt --all -- --check
        continue-on-error: false

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check code
        run: cargo check --all-targets --all-features

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-

      - name: Run unit tests
        run: cargo test --release --verbose

      - name: Run doc tests
        run: cargo test --doc --release

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        test:
          - package-install
          - package-remove
          - build-workflow
          - legacy-plugins
          - version-constraints
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build runtime image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          load: true
          tags: opencli:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup test scenarios
        run: |
          chmod +x scripts/setup-test-scenarios.sh
          ./scripts/setup-test-scenarios.sh

      - name: Run integration test - ${{ matrix.test }}
        run: docker compose -f docker-compose.test.yml up test-${{ matrix.test }} --abort-on-container-exit --exit-code-from test-${{ matrix.test }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
        
      - name: Check deny.toml
        uses: EmbarkStudios/cargo-deny-action@v2
        continue-on-error: true
        with:
          log-level: warn
          command: check
          arguments: --all-features
          rust-version: "1.89.0"

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --out Xml --output-dir coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/cobertura.xml
          fail_ci_if_error: false
        continue-on-error: true

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, docker-tests, security-audit]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Tests: ${{ needs.docker-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Verify all tests passed
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One or more tests failed"
          exit 1
